// Mixins
@use "variables";

// =============================================================================
// String Replace
// =============================================================================

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// =============================================================================
// Font Face
// =============================================================================

@mixin font-face($name, $path, $weight: null, $style: null, $exts: eot woff2 woff ttf svg) {
  $src: null;

  $extmods: (
          eot: "?",
          svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
          otf: "opentype",
          ttf: "truetype"
  );

  @each $ext in $exts {
    $extmod: if(map-has-key($extmods, $ext), $ext + map-get($extmods, $ext), $ext);
    $format: if(map-has-key($formats, $ext), map-get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma);
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }
}

@mixin mediaMinWidth768 {
  @media (min-width: 768px) {
    @content;
  }
}

@mixin mediaMinWidth1200 {
  @media (min-width: 1200px) {
    @content;
  }
}

@mixin mediaMaxWidth768 {
  @media (max-width: 768px) {
    @content;
  }
}

@mixin css3-prefix($property, $value) {
  -webkit-#{$property}: #{$value};
  -khtml-#{$property}: #{$value};
  -moz-#{$property}: #{$value};
  -ms-#{$property}: #{$value};
  -o-#{$property}: #{$value};
  #{$property}: #{$value};
}

@mixin transition($properties...) {

  @if length($properties) >= 1 {
    @include css3-prefix('transition', $properties);
  } @else {
    @include css3-prefix('transition', "all 0.3s ease-in-out 0s");
  }
}

@mixin square($size) {
  width: $size;
  height: $size;
}

@mixin childElemOverPosition {

  & > * {
    position: relative;
    z-index: 2;
  }

}

@mixin position($position, $top: null, $right: null, $bottom: null, $left: null) {
  position: $position;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin absolute($args...) {
  @include position(absolute, $args...);
}

@mixin psevdoElemDecor {
  content: "";
  z-index: 0;
  pointer-events: none;
  @include absolute(0, 0, 0, 0);
  @include square(100%);
}

@function gutterSizeDel($num) {
  @return calc(#{variables.$gutter} / #{$num});
}

@function gutterSizeMultiplication($num) {
  @return calc(#{variables.$gutter} * #{$num});
}

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{ $animation-name } {
    @content;
  }
  @-moz-keyframes #{$animation-name} {
    @content;
  }
  @-ms-keyframes #{$animation-name}{
    @content;
  }
  @-o-keyframes #{ $animation-name } {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};
}

@mixin progressBarFilledClasses() {
  @for $i from 1 through 4 {
    &.lvl-#{$i}:after {
      width: calc(25% * #{$i});
    }
  }
}

@include keyframes(arrowAnimation) {
  0% {
    bottom: 10px
  }
  100% {

    bottom: 20px

  }
}

@mixin arrowToBottomForSection($bgcolor) {
  content: "";
  pointer-events: none;
  @include absolute(auto, 0, 10px, 0);
  @include square(36vh);
  margin: auto;
  transform: rotate(45deg);
  transform-origin: center;
  background-color: $bgcolor;
  z-index: -1;
  @include animation(arrowAnimation 1s ease-in-out infinite alternate);
}

@mixin layoutWithArrowBottom($z,$bgcolor) {
  position: relative;
  z-index: $z;

  @include mediaMinWidth1200 {
    &:after {
      @include arrowToBottomForSection($bgcolor);
    }
  }


}